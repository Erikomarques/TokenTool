import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat
import org.ajoberstar.grgit.*



apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
targetCompatibility = 1.7

mainClassName = 'net.rptools.tokentool.TokenTool'

version = getVersionName()

ext.repo = Grgit.open(project.file('.'))

task wrapper(type: Wrapper) {
    gradleVersion='2.1'
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.11.2'
    }
}

configurations {
    osxTools
}


dependencies {
    osxTools 'com.oracle.appbundler:AppBundlerTask:1.0'
    compile 'net.rptools.rplib:rplib:1.0.b136'
    compile 'net.rptools.parser:parser:1.1.b24'
    compile 'com.withay:withay-util:1.0'
    compile 'com.thoughtworks.xstream:xstream:1.4.8'
    compile 'de.muntjak.tinylookandfeel:tinylaf-nocp:1.4.0'
    compile 'net.java.abeille:abeille-formsrt:2.0'
    compile 'commons-logging:commons-logging:1.1.1'
    compile 'log4j:log4j:1.2.16'
    compile 'commons-io:commons-io:2.0'
}

ext.compileDate = new Date();
ext.yyyymmdd = (new SimpleDateFormat('yyyyMMDD')).format(ext.compileDate);


repositories {
    mavenCentral()
    maven {
        url = 'http://maptool.craigs-stuff.net/repo/'
    }
    maven {
        url = 'http://www.nerps.net/repo/'
    }
}


/*
 * Gets the version name from the latest Git tag
 */

def getVersionName() {

    if (project.hasProperty('buildVersion')) {
        return buildVersion
    } else {
        def repo = Grgit.open(project.file('.'))
        def tagName = repo.tag.list()[0].fullName.replace('refs/tags/', '')
        def tagCommit = repo.tag.list()[0].commit.id
        def headCommit = repo.head().id
        def headAbbrvId = repo.head().abbreviatedId

        if (tagCommit == headCommit) {
            return tagName
        } else {
            return tagName + '-' + headAbbrvId
        }
    }
}

findbugs {
    ignoreFailures = true
    toolVersion = '3.0.0'
    effort = 'max'
    sourceSets = []  // Empty source set so it wont run during build/check
}

pmd {
    ignoreFailures = true
    sourceSets = []  // Empty source set so it wont run during tebuild/check
}



task showBuildVersion() << {
    println 'Build Version Number = ' + project.version
}

task copyLibs(type: Sync) {
    from configurations.compile
    into jar.destinationDir.getPath() + '/lib'
}

jar {
    manifest.attributes(
        'Main-Class': mainClassName,
        'Class-Path': configurations.runtime.files.collect { "lib/" + it.name }.join(' ')
    )
}
assemble.dependsOn += copyLibs;


task copyProjectFiles(type: Sync) {
    from jar.destinationDir.getPath()
    into 'build/tmp/dist'
    outputs.upToDateWhen {
        false
    }
}
copyProjectFiles.mustRunAfter('jar')

task zipRelease(dependsOn: copyProjectFiles, type: Zip) {
    from 'build/tmp/dist/'
    into  ''
    baseName = 'tokentool-' + getVersionName()
    destinationDir new File(projectDir, 'build')
    outputs.upToDateWhen {
        false
    }
}



task osxApp(dependsOn: copyProjectFiles) << {
    def baseDir = '.'
    def buildVersion = rootProject.getVersionName()
    def mainClassName = mainClassName
    def sourceDir = 'build/tmp/dist'
    ant {
        taskdef(
            name: 'bundleapp',
            classname: 'com.oracle.appbundler.AppBundlerTask',
            classpath: configurations.osxTools.asPath
        )
        bundleapp(
            outputdirectory: 'build/tmp/',
            name: 'TokenTool-' + buildVersion,
            displayname: 'TokenTool-' + buildVersion,
            identifier: 'net.rptools.tokentool',
            mainclassname: mainClassName,
            signature: 'RPTM',
            icon: 'build-resources/tokentool-icon.icns'
        ) {
            classpath(dir: sourceDir) {
                include(name: '*.jar')
                include(name: '**/*.jar')
            }
            option(value: '-Dapple.laf-useScreenMenuBar=true')
            option(value: '-Dfile.encoding=UTF-8')
            option(value: '-Xmx768m')
            option(value: '-Xss4m')
            option(value: '-Dcom.apple.textantialiasing=true')
            option(value: '-Dcom.apple.antialiasing=true')
            option(value: '-Djava.library.path=$APP_ROOT/Contents/Java')
        }
    }
}

task zipOSXApp(dependsOn: osxApp, type: Zip) {
    from 'build/tmp/TokenTool-' + getVersionName() + '.app'
    into  'TokenTool-' + getVersionName() + '.app'
    baseName = 'tokentool-' + getVersionName() + '-osx'
    destinationDir new File(projectDir, 'build')
    outputs.upToDateWhen {
        false
    }
}



task release(dependsOn: assemble) {
    println 'Creating Release'
}
release.dependsOn += zipRelease
release.dependsOn += zipOSXApp

